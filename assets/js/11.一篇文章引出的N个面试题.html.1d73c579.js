"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[928],{2762:(e,o,l)=>{l.r(o),l.d(o,{comp:()=>n,data:()=>i});var t=l(641);const c=(0,t.Fv)('<h2 id="_1-如何减少dns的解析时间" tabindex="-1"><a class="header-anchor" href="#_1-如何减少dns的解析时间"><span>1. 如何减少DNS的解析时间</span></a></h2><p><strong>启动DNS预解析</strong>；浏览器在解析HTML时，遇到配置了预解析的<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//example.com&quot;&gt;</code>，会发起一个异步的DNS查询，等到资源请求时，就不用再等待DNS解析。</p><h2 id="_2-http和https的区别" tabindex="-1"><a class="header-anchor" href="#_2-http和https的区别"><span>2. HTTP和HTTPS的区别</span></a></h2><ol><li><p><strong>安全性：</strong> HTTP是明文传输协议，数据在传输过程中不经过加密处理，容易被窃听和篡改。HTTPS通过使用<code>SSL/TLS</code>协议对数据进行加密（虽然还是能被抓取），增加传输过程中的安全性。</p></li><li><p><strong>默认端口：</strong> HTTP默认使用<strong>端口80</strong>进行通信。<code>HTTPS</code>默认使用<strong>端口443</strong>进行通信。</p></li><li><p><strong>证书要求：</strong> HTTP不需要使用证书，HTTPS使用CA签发的<code>SSL</code>（Secure Sockets Layer）或<code>TLS</code>（Transport Layer Security）证书来验证服务器的身份，并建立连接。</p></li></ol><h2 id="_3-http2的特性" tabindex="-1"><a class="header-anchor" href="#_3-http2的特性"><span>3. HTTP2的特性</span></a></h2><ul><li><strong>多路复用</strong>，能够在单个<code>TCP</code>连接上同时传输多个请求和响应；<code>HTTP1.1</code>有一个可选的<code>Pipelining</code>技术，但它是按照顺序处理响应的，后发的请求可能被先发的请求阻塞，所以很多浏览器默认不开启。</li><li><strong>首部压缩</strong>，使用HPACK算法对请求和响应头部进行压缩，减少了首部大小，节省了带宽。而在<code>HTTP/1.x</code>中，每次请求都需要发送完整的头部信息，很容易造成不必要的带宽浪费。</li><li><strong>服务器推送</strong>，服务端可以在发送页面<code>HTML</code>，也就是客户端请求对应<code>HTML</code>页面时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。</li><li><strong>二进制分帧</strong>，使用二进制协议对数据进行分帧传输。二进制协议更高效，减少了解析数据的开销，并提高了传输速度。</li></ul><h2 id="_4-强缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#_4-强缓存和协商缓存"><span>4. 强缓存和协商缓存</span></a></h2><p><strong>强缓存</strong>，只要资源未过期直接读取本地资源并返回200，通过<code>Expires</code>（指定资源过期的绝对时间）和<code>Cache-Control:max-age=&lt;seconds&gt;</code>两个请求头来控制，为了更精确的控制（<code>max-age</code>参数为请求的相对时间、减少<code>max-age</code>值来手动刷新），<code>Cache-Control</code>的优先级比<code>Expires</code>更高。</p><p><strong>协商缓存</strong>，强缓存失效时，浏览器携带上一次请求返回的响应头中的缓存标记（如<code>ETag、Last-Modified</code>等）向服务器发起请求，查询缓存的资源是否有效；资源没更新，就返回304，通知浏览器读取本地缓存，否则返回新的内容，状态码为200；参数的优先级方面，<code>ETag</code>要高于<code>Last-Modified</code>，因为<code>ETag</code>有更高的唯一性，对比资源变化会更加精准。</p><p>正常情况下，都是先读取强缓存，未命中再读取协商缓存，但是有几种情况是直接读取协商缓存：</p><ul><li><code>cache-control</code>的值为<code>must-revalidate</code>，表示客户端必须与服务器进行确认以验证缓存的有效性，即使强缓存仍然有效。</li><li><code>cache-control</code>的值为<code>no-cache</code>，表示客户端不应直接使用缓存，而是需要与服务器验证资源的有效性。</li><li><code>cache-control</code>的值为<code>max-age=0</code>，设置资源有效时间为0，会直接发起协商缓存的请求。</li></ul><h2 id="_5-tcp的三次握手" tabindex="-1"><a class="header-anchor" href="#_5-tcp的三次握手"><span>5. TCP的三次握手</span></a></h2><ol><li><p>客户端发送连接请求报文段。</p></li><li><p>服务器收到客户端的连接请求后，如果同意建立连接，则会发送一个响应报文。</p></li><li><p>客户端收到服务器的响应后，对其进行确认，服务器收到这个确认后，就完成了三次握手，双方可以开始进行数据传输了。</p></li></ol><h3 id="如果第二次握手失败会怎么样" tabindex="-1"><a class="header-anchor" href="#如果第二次握手失败会怎么样"><span>如果第二次握手失败会怎么样</span></a></h3><ol><li><strong>超时</strong>：客户端未在规定时间内收到服务器的 SYN/ACK 响应，可能是由于网络延迟、丢包或服务器未正常响应。</li><li><strong>拒绝连接</strong>：服务器可能基于某些策略（如负载均衡、连接数限制等）拒绝客户端的连接请求。</li><li><strong>重传</strong>：客户端可能会重新发送连接请求，尝试建立连接。</li></ol><h2 id="_6-tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#_6-tcp四次挥手"><span>6. TCP四次挥手</span></a></h2><ol><li><p>客户端向服务器发送连接释放请求（FIN）报文段。客户端希望关闭连接，并停止发送数据。客户端进入<code>FIN_WAIT_1</code>状态。</p></li><li><p>服务器收到连接释放请求后，发送确认（ACK）报文段作为响应，确认收到了客户端的关闭请求。服务器进入<code>CLOSE_WAIT</code>状态，客户端进入<code>FIN_WAIT_2</code>状态。</p></li><li><p>服务器完成自己未发送的数据的发送后，发送连接释放请求（FIN）报文段给客户端，表示服务器也希望关闭连接。服务器进入<code>LAST_ACK</code>状态。</p></li><li><p>客户端收到服务器的连接释放请求后，发送确认（ACK）报文段作为响应，确认收到了服务器的关闭请求。客户端进入<code>TIME_WAIT</code>状态。此时，服务器等待最后一个ACK的确认。</p></li><li><p>在经过一段时间（通常是两倍的报文段最大生存时间，即2MSL）后，客户端关闭连接，结束<code>TIME_WAIT</code>状态。最后一个ACK被发送到服务器。</p></li></ol><p>在四次挥手完成后，TCP连接正式关闭，客户端和服务器都进入了CLOSED状态。</p><h2 id="_7-html是如何解析的" tabindex="-1"><a class="header-anchor" href="#_7-html是如何解析的"><span>7. HTML是如何解析的</span></a></h2><ul><li><ol><li><strong>词法分析</strong>，加载完HTML文件之后，开始解析HTML，通过状态机拆解为不同的标记类型，比如起始标签（<code>&lt;div&gt;</code>）、结束标签（<code>&lt;/div&gt;</code>）、文本节点、自闭合标签（<code>&lt;img/&gt;</code>）。</li></ol></li><li><ol start="2"><li><strong>构建DOM树</strong>，从<code>&lt;html&gt;</code>开始，从上到下的逐行解析生成一个树状结构的<code>DOM</code>树，在中间如果遇到<code>&lt;script&gt;</code>标签，会立即执行脚本（如果没有<code>async</code>或<code>defer</code>），可能会修改<code>DOM</code>树结构。</li></ol></li><li><ol start="3"><li><strong>处理外部资源</strong>，<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>或<code>&lt;script&gt;</code>等标签时，会发送额外的网络请求来获取对应的资源。在整个解析过程，除了<code>script</code>脚本会阻塞页面解析（可以使用<code>async</code>或者<code>defer</code>），遇到外部<code>CSS</code>文件时，在等待下载的过程同样是会阻塞页面的（可以加载个第三方的<code>CSS</code>文件链接复现，可通过<code>JS</code>异步加载<code>CSS</code>文件解决）。</li></ol></li><li><ol start="4"><li><strong>构建 CSSOM 树</strong>，CSSOM（CSS Object Model）是一个与<code>DOM</code>树类似的结构，用于描述样式规则的层级和继承关系。</li></ol></li><li><ol start="5"><li><strong>生成渲染树</strong>，浏览器将<code>DOM</code>树和<code>CSSOM</code>树合并为渲染树；渲染树只包含可见的内容，不可见的内容（如<code>display:none</code>的元素）不会进入渲染树，但仍在DOM树中。</li></ol></li><li><ol start="6"><li><strong>布局与绘制</strong>,在HTML解析完成后，页面开始进入渲染阶段（解析、布局、绘制、合成），浏览器根据渲染树计算每个元素的几何位置和大小，将布局好的元素绘制到屏幕上，如果有动画或变换，则会通过合成阶段在GPU上处理。</li></ol></li></ul><h2 id="_8-说下重绘和回流及优化" tabindex="-1"><a class="header-anchor" href="#_8-说下重绘和回流及优化"><span>8. 说下重绘和回流及优化</span></a></h2><p><strong>回流</strong>，首先浏览器遍历渲染树，计算每个可见节点在屏幕上的位置和大小等几何属性；在这个过程中，因为节点几何属性的变化，又需要对受影响节点重新计算布局，同时回流的时候必定会触发重绘，所以频繁回流会占用大量的资源来进行布局计算。</p><p><strong>重绘</strong>，在布局完成之后，按照渲染树的顺序，逐个绘制节点，包括颜色、边框、渲染背景、文字、图像等内容。</p><h2 id="_9-为什么transform不会触发回流" tabindex="-1"><a class="header-anchor" href="#_9-为什么transform不会触发回流"><span>9. 为什么transform不会触发回流</span></a></h2><p><strong>因为<code>transform</code>是完全独立于文档流的布局计</strong>；当对某个元素应用<code>transform</code>时，浏览器会给这个元素生成一个单独的图层，这些独立的图层在GPU中进行操作，从而避免影响其他元素的渲染。</p><h2 id="_10-async和defer的区别" tabindex="-1"><a class="header-anchor" href="#_10-async和defer的区别"><span>10. async和defer的区别</span></a></h2><p><strong>async</strong>：脚本下载完成后立即执行，且不会等待页面的其他内容渲染，可能导致脚本执行顺序不确定。 <strong>defer</strong>：脚本会延迟执行，直到页面的 HTML 文档解析完成，且保证按照出现的顺序执行</p><p>到这就基本把整个页面加载链路里经常碰到的面试题罗列出来了，希望对大家有帮助。</p>',28),d={},n=(0,l(6262).A)(d,[["render",function(e,o){const l=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("p",null,[(0,t.eW)("太久没看面试题了，看之前的"),(0,t.bF)(l,{to:"/blogs/article/9.%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%EF%BC%8C%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B.html"},{default:(0,t.k6)((()=>[(0,t.eW)("输入一个URL，回车之后到页面渲染的那些事")])),_:1}),(0,t.eW)("，又来复习一波，把其中的碰到过的一些面试题提取出来，面向面试学习。")]),c])}]]),i=JSON.parse('{"path":"/blogs/article/11.yipianwenzhangyinchudeNgemianshiti.html","title":"一篇文章引出的N个面试题","lang":"en-US","frontmatter":{"title":"一篇文章引出的N个面试题","date":"2024-11-26T00:00:00.000Z","categories":["article"],"tags":["浏览器"]},"headers":[{"level":2,"title":"1. 如何减少DNS的解析时间","slug":"_1-如何减少dns的解析时间","link":"#_1-如何减少dns的解析时间","children":[]},{"level":2,"title":"2. HTTP和HTTPS的区别","slug":"_2-http和https的区别","link":"#_2-http和https的区别","children":[]},{"level":2,"title":"3. HTTP2的特性","slug":"_3-http2的特性","link":"#_3-http2的特性","children":[]},{"level":2,"title":"4. 强缓存和协商缓存","slug":"_4-强缓存和协商缓存","link":"#_4-强缓存和协商缓存","children":[]},{"level":2,"title":"5. TCP的三次握手","slug":"_5-tcp的三次握手","link":"#_5-tcp的三次握手","children":[{"level":3,"title":"如果第二次握手失败会怎么样","slug":"如果第二次握手失败会怎么样","link":"#如果第二次握手失败会怎么样","children":[]}]},{"level":2,"title":"6. TCP四次挥手","slug":"_6-tcp四次挥手","link":"#_6-tcp四次挥手","children":[]},{"level":2,"title":"7. HTML是如何解析的","slug":"_7-html是如何解析的","link":"#_7-html是如何解析的","children":[]},{"level":2,"title":"8. 说下重绘和回流及优化","slug":"_8-说下重绘和回流及优化","link":"#_8-说下重绘和回流及优化","children":[]},{"level":2,"title":"9. 为什么transform不会触发回流","slug":"_9-为什么transform不会触发回流","link":"#_9-为什么transform不会触发回流","children":[]},{"level":2,"title":"10. async和defer的区别","slug":"_10-async和defer的区别","link":"#_10-async和defer的区别","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/article/11.一篇文章引出的N个面试题.md"}')}}]);