"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[4059],{598:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>c});var e=a(641);const i=[(0,e.Fv)('<p>首先说下场景，最近又捣鼓升级了一下Git个人网站的vuepress版本，弄完之后就想在提交代码的时候把构建的资源再提交到一个新的Git仓库；</p><p>以前都是手动执行打包部署的node脚本，发布构建的资源到指定分支，最后用action自动更新，这次就想再简化一下流程，提交代码的时候直接就执行这些操作。</p><h2 id="the-initial-version" tabindex="-1"><a class="header-anchor" href="#the-initial-version"><span>The initial version</span></a></h2><p>因为平时项目里面也用到了<code>husky</code>，就先想着我再加一个hooks的监听执行命令就ok了，</p><p>在<code>.husky</code>文件夹里创建一个<code>pre-push</code>文件，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>\n<span class="token function">npm</span> run publish <span class="token comment"># 执行package.json里面的打包命令；</span>\n<span class="token comment"># &quot;publish&quot;: &quot;node publish&quot;，用node执行publish.js，在publish.js中执行shell文件</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终就是运行这个shell文件的内容</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>\n<span class="token comment">#!/usr/bin/env sh</span>\n\n<span class="token comment"># 确保脚本抛出遇到的错误</span>\n<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>\n\n<span class="token comment"># 生成静态文件</span>\n<span class="token function">npm</span> run build\n\n<span class="token comment"># 进入生成的文件夹</span>\n<span class="token builtin class-name">cd</span> .vuepress/dist\n\n<span class="token function">git</span> init\n<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span>\n\n<span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span>\n<span class="token function">git</span> push <span class="token parameter variable">-f</span> 需要提交的git仓库ssh路径 master:gh-pages\n\n<span class="token builtin class-name">cd</span> - \n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>做完上面这些，想要的效果也能达到了，但是因为整个构建的过程是在本地执行，就非常的耗时，</p><p>可以想象一下，每次push代码，就要弹出来一个运行任务的黑色窗口，执行完了之后才能完成整个push操作，</p><h2 id="final-version" tabindex="-1"><a class="header-anchor" href="#final-version"><span>Final version</span></a></h2><p>之前是GitHub和Gitee都整了个GitPage，最近Gitee那边的挂了一直没好，直接就all in Github了，</p><h3 id="_1-生成ssh密钥" tabindex="-1"><a class="header-anchor" href="#_1-生成ssh密钥"><span>1. 生成SSH密钥</span></a></h3><p>因为使用提交代码的SSH密钥会提示重复，所以这还得再重新生成，执行下面的命令，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;your_email@example.com&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行之后会提示你输入文件保存路径和文件名。我设置的名字是<code>id_rsa_github_action</code>，所以密钥对会保存在 <code>~/.ssh/id_rsa_github_action</code>（私钥）和 <code>~/.ssh/id_rsa_github_action.pub</code>（公钥），</p><h3 id="_2-目标仓库添加公钥" tabindex="-1"><a class="header-anchor" href="#_2-目标仓库添加公钥"><span>2. 目标仓库添加公钥</span></a></h3><p>打开<code>id_rsa_github_action.pub</code>文件，复制公钥内容，</p><p>进入目标Git仓库的GitHub页面，转到&quot;Settings&quot; -&gt; &quot;Deploy keys&quot;。</p><p>点击&quot;Add deploy key&quot;按钮，粘贴公钥，并勾选&quot;Allow write access&quot;。</p><h3 id="_3-源仓库添加私钥" tabindex="-1"><a class="header-anchor" href="#_3-源仓库添加私钥"><span>3. 源仓库添加私钥</span></a></h3><p>打开<code>id_rsa_github_action</code>文件，复制私钥，</p><p>进入源代码仓库的GitHub页面，转到&quot;Settings&quot; -&gt; &quot;Secrets and variables&quot; -&gt; &quot;Actions&quot;。</p><p>点击&quot;New repository secret&quot;按钮，创建一个名为<code>SSH_PRIVATE_KEY</code>密钥，并将私钥内容粘贴进去。</p><h3 id="_4-配置github-actions工作流" tabindex="-1"><a class="header-anchor" href="#_4-配置github-actions工作流"><span>4. 配置GitHub Actions工作流</span></a></h3><p>创建<code>.github/workflows/deploy.yml</code>文件，添加下面内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>name: Deploy VuePress Site\n\non:\n  push:\n    branches:\n      - main  <span class="token comment"># 监听触发部署的分支</span>\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      \n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: <span class="token string">&#39;20&#39;</span>  <span class="token comment"># 指定Node版本</span>\n\n    - name: Install dependencies\n      run: <span class="token function">npm</span> <span class="token function">install</span>\n\n    - name: Build VuePress site\n      run: <span class="token function">npm</span> run build  <span class="token comment"># 构建</span>\n\n    - name: Deploy to another Git repository\n      env:\n        DEPLOY_REPO: git@github.com:yourusername/yournewrepo.git  <span class="token comment"># 替换为你的目标仓库地址</span>\n        DEPLOY_BRANCH: gh-pages  <span class="token comment"># 目标仓库分支</span>\n        SSH_PRIVATE_KEY: <span class="token variable">${{ secrets.SSH_PRIVATE_KEY }</span><span class="token punctuation">}</span>\n\n      run: <span class="token operator">|</span>\n        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.ssh\n        <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">${SSH_PRIVATE_KEY}</span>&quot;</span> <span class="token operator">&gt;</span> ~/.ssh/id_rsa\n        <span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/id_rsa\n        ssh-keyscan github.com <span class="token operator">&gt;&gt;</span> ~/.ssh/known_hosts\n        <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;github-actions[bot]&quot;</span>\n        <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;github-actions[bot]@users.noreply.github.com&quot;</span>\n        <span class="token builtin class-name">cd</span> .vuepress/dist  <span class="token comment"># 源仓库需要提交出去的代码文件夹</span>\n        <span class="token function">git</span> init\n        <span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token variable">$DEPLOY_REPO</span>\n        <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token variable">$DEPLOY_BRANCH</span>\n        <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n        <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Deploy VuePress site&quot;</span>\n        <span class="token function">git</span> push <span class="token parameter variable">--force</span> origin <span class="token variable">$DEPLOY_BRANCH</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以在源仓库设置的分支中提交代码了，actions在监听到提交之后就自动运行工作流，</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>还踩了挺多坑的，开始不知道是要设置<code>Deploy keys</code>，设置了半天的secret，各种私钥密钥的尝试，一直都是报错没有权限，提示<code>Error: The deploy step encountered an error: The process &#39;/usr/bin/git&#39; failed with exit code 128</code>,</p><p>最终的效果就是，在提交源仓库代码的时候，会触发Git Actions执行打包操作，完成之后会提交代码到目标仓库，目标仓库触发Git Actions更新Git Page。</p>',31)],l={},t=(0,a(6262).A)(l,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,i)}]]),c=JSON.parse('{"path":"/blogs/article/10.GitHub Actionstongbudangqianxiangmudaoyigexincangku.html","title":"GitHub Actions同步当前项目到一个新仓库","lang":"en-US","frontmatter":{"title":"GitHub Actions同步当前项目到一个新仓库","date":"2024-05-14T00:00:00.000Z","categories":["article"],"tags":["Git"]},"headers":[{"level":2,"title":"The initial version","slug":"the-initial-version","link":"#the-initial-version","children":[]},{"level":2,"title":"Final version","slug":"final-version","link":"#final-version","children":[{"level":3,"title":"1. 生成SSH密钥","slug":"_1-生成ssh密钥","link":"#_1-生成ssh密钥","children":[]},{"level":3,"title":"2. 目标仓库添加公钥","slug":"_2-目标仓库添加公钥","link":"#_2-目标仓库添加公钥","children":[]},{"level":3,"title":"3. 源仓库添加私钥","slug":"_3-源仓库添加私钥","link":"#_3-源仓库添加私钥","children":[]},{"level":3,"title":"4. 配置GitHub Actions工作流","slug":"_4-配置github-actions工作流","link":"#_4-配置github-actions工作流","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/article/10.GitHub Actions同步当前项目到一个新仓库.md"}')}}]);