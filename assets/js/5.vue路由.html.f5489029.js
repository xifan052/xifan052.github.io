"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[7779],{7616:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>o});var e=a(641);const t=[(0,e.Fv)('<ul><li>路由是根据不同的 url 地址展示不同的内容或页面</li><li>前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的</li></ul><h2 id="前端路由使用场景" tabindex="-1"><a class="header-anchor" href="#前端路由使用场景"><span>前端路由使用场景</span></a></h2><ul><li>在单页面应用，大部分页面结构不变，只改变部分内容的使用</li></ul><h2 id="前端路由优缺点" tabindex="-1"><a class="header-anchor" href="#前端路由优缺点"><span>前端路由优缺点</span></a></h2><ul><li>优点： ①.用户体验好，不需要每次都用服务器全部获取，快速展现给用户</li><li>缺点： ①.不利于 SEO；②.使用浏览器的前进后退功能的时候会重新发请求，没有合理的利用缓存；③.单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><ul><li>vue-router 用来构建 SPA</li><li><code>&lt;router-link&gt;&lt;/router-link&gt;或者this.$router.push({path:&#39;&#39;}) //跳转</code></li><li><code>&lt;router-view&gt;&lt;/router-view&gt; //渲染</code></li></ul><h2 id="动态路由-根据不同参数显示不同的页面" tabindex="-1"><a class="header-anchor" href="#动态路由-根据不同参数显示不同的页面"><span>动态路由 (根据不同参数显示不同的页面)</span></a></h2><ul><li>/user/:username (模式) /user/evan (匹配路径) { username: &#39;evan&#39; } ($route.params)</li><li>/user/:username/post/:postId(模式) /user/evan/post/123(匹配路径) { username:&#39;evan&#39;,postId:123 }($route.params)</li></ul><h2 id="嵌套路由-路由嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由-路由嵌套路由"><span>嵌套路由 (路由嵌套路由)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>   <span class="token punctuation">{</span>\n     <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/goodList&#39;</span><span class="token punctuation">,</span>\n     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;goodList&#39;</span><span class="token punctuation">,</span>\n     <span class="token literal-property property">component</span><span class="token operator">:</span> goodList<span class="token punctuation">,</span>\n     <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>\n       <span class="token punctuation">{</span>\n         <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span>\n         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span>\n         <span class="token literal-property property">component</span><span class="token operator">:</span> title<span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token punctuation">{</span>\n         <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>\n         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>\n         <span class="token literal-property property">component</span><span class="token operator">:</span> img<span class="token punctuation">,</span>\n       <span class="token punctuation">}</span>\n     <span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编程式路由-通过-js-来实现页面的跳转" tabindex="-1"><a class="header-anchor" href="#编程式路由-通过-js-来实现页面的跳转"><span>编程式路由 (通过 js 来实现页面的跳转)</span></a></h2><ul><li><code>this.$router.push(&quot;name&quot;)</code></li><li><code>this.$router.push({path:&quot;name&quot;})</code></li><li><code>this.$router.push({path:&quot;name?a=123&quot;})</code>或者<code>this.$router.push({path:&quot;name&quot;,query:{a:123}})</code>，页面中使用<code>this.$route.query.参数名</code>来接收参数。query 是页面的参数接收，在页面跳转的 query 中或者？后面声明，params 是路由的参数接收，在 path 中声明</li><li><code>this.$router.go(1)</code></li></ul><h2 id="命名路由和命名视图" tabindex="-1"><a class="header-anchor" href="#命名路由和命名视图"><span>命名路由和命名视图</span></a></h2><ul><li>命名路由：在 index.js 中注册路由时添加 name。可以通过(因为 index.js 声明的是动态路由，所以使用 params 来设置参数) <code>&lt;router-link v-bind:to=&quot;{name:&#39;cart&#39;,params:{productId:123}}&quot;&gt;使用命名路由带参数跳转购物车&lt;/router-link&gt;</code> 跳转</li><li>命名视图：在 App.vue 文件中的<code>&lt;router-view name=&quot;img&quot;&gt;&lt;/router-view&gt;</code>声明 name。在 index.js 注册路由时，把 components 改为 component,适用于同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;@/components/HelloWorld&#39;</span>\n<span class="token keyword">import</span> Img <span class="token keyword">from</span> <span class="token string">&#39;@/components/img&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> HelloWorld<span class="token punctuation">,</span>\n        <span class="token literal-property property">img</span><span class="token operator">:</span> Img<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',16)],p={},l=(0,a(6262).A)(p,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),o=JSON.parse('{"path":"/blogs/note/vue/5.vueluyou.html","title":"5.vue路由","lang":"en-US","frontmatter":{"title":"5.vue路由","date":"2017-06-02T00:00:00.000Z","categories":["note"],"tags":["Vue"]},"headers":[{"level":2,"title":"前端路由使用场景","slug":"前端路由使用场景","link":"#前端路由使用场景","children":[]},{"level":2,"title":"前端路由优缺点","slug":"前端路由优缺点","link":"#前端路由优缺点","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"动态路由 (根据不同参数显示不同的页面)","slug":"动态路由-根据不同参数显示不同的页面","link":"#动态路由-根据不同参数显示不同的页面","children":[]},{"level":2,"title":"嵌套路由 (路由嵌套路由)","slug":"嵌套路由-路由嵌套路由","link":"#嵌套路由-路由嵌套路由","children":[]},{"level":2,"title":"编程式路由 (通过 js 来实现页面的跳转)","slug":"编程式路由-通过-js-来实现页面的跳转","link":"#编程式路由-通过-js-来实现页面的跳转","children":[]},{"level":2,"title":"命名路由和命名视图","slug":"命名路由和命名视图","link":"#命名路由和命名视图","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/note/vue/5.vue路由.md"}')}}]);