"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[6426],{3938:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>l});var e=a(641);const t=[(0,e.Fv)('<p>typescript 中为了编写的代码更规范,更有利于维护,增加了类型校验,代码必须制定类型</p><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>true、false</td><td>布尔值 true 或 false</td></tr><tr><td>number</td><td>1,-2,3.1</td><td>任意数字</td></tr><tr><td>string</td><td>&#39;hahaha&#39;</td><td>任意字符串</td></tr><tr><td>array</td><td>let arr: number[] = [1, 2, 3]</td><td>任意的 js 数组</td></tr><tr><td>tuple</td><td>let tupleArr: [number, string] = [1, &#39;hello&#39;]</td><td>元组，TS 新增类型，固定长度、元素数据类型数组</td></tr><tr><td>enum</td><td>enum Color {blue1,red1,orange1}</td><td>枚举，TS 新增类型</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的 any</td></tr><tr><td>void</td><td>空值(undefined)</td><td>没有值(或 undefined)</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{a:1}</td><td>任意的 js 对象</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr></tbody></table><h2 id="_1-布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#_1-布尔类型-boolean"><span>1. 布尔类型 (boolean)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-数字类型-number" tabindex="-1"><a class="header-anchor" href="#_2-数字类型-number"><span>2. 数字类型 (number)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-字符串类型-string" tabindex="-1"><a class="header-anchor" href="#_3-字符串类型-string"><span>3. 字符串类型 (string)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">str1</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-数组类型-array" tabindex="-1"><a class="header-anchor" href="#_4-数组类型-array"><span>4. 数组类型 (array)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组</span>\n<span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 第二种定义数组的方式是使用数组泛型，Array&lt;元素类型&gt;：</span>\n<span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-元组类型-tuple" tabindex="-1"><a class="header-anchor" href="#_5-元组类型-tuple"><span>5. 元组类型 (tuple)</span></a></h2><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-枚举类型-enum" tabindex="-1"><a class="header-anchor" href="#_6-枚举类型-enum"><span>6. 枚举类型 (enum)</span></a></h2><p>enum 类型是对 JavaScript 标准数据类型的一个补充。 像 C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>   <span class="token comment">// 定义一个容器，使用相应含义的单词来代表某一状态。事先考虑到某一变量可能取得值，尽量用自然语言含义中含义清楚地单词来表示它的每一个值，这种方法称为枚举方法，用这种方法定义的数据类型称为枚举类型。</span>\n   <span class="token keyword">enum</span> flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>\n   <span class="token keyword">let</span> <span class="token literal-property property">s</span><span class="token operator">:</span>flag <span class="token operator">=</span> flag<span class="token punctuation">.</span>success<span class="token punctuation">;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n\n   <span class="token comment">// 常用的场景例如小程序各种错误码，定义是什么类型的错误。</span>\n   <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>blue1<span class="token punctuation">,</span>red1<span class="token punctuation">,</span>orange1<span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> <span class="token literal-property property">col</span><span class="token operator">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>red1<span class="token punctuation">;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token comment">// 如果标识符没有赋值，它的值就是下标</span>\n\n  <span class="token comment">// 如果前一个指定了一个数值，后面没有值，则后面的按前面指定值</span>\n   <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>blue1<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>red1<span class="token punctuation">,</span>orange1<span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> <span class="token literal-property property">col</span><span class="token operator">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>red1<span class="token punctuation">;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token comment">// 4 因为枚举成员的默认下标是在前一个下标加1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-任意类型-any" tabindex="-1"><a class="header-anchor" href="#_7-任意类型-any"><span>7. 任意类型 (any)</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 当没有指定类型时，会默认any, 应用于一个场景无法明确数据类型，或者单个数据类型没办法满足的情况</span>\n<span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-unknown" tabindex="-1"><a class="header-anchor" href="#_8-unknown"><span>8. unknown</span></a></h2><p>是一个类型安全的 any</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">s</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token comment">// s = str // ok any类型的变量可以赋值给任意变量类型；</span>\n<span class="token keyword">let</span> <span class="token literal-property property">unknownStr</span><span class="token operator">:</span> unknown<span class="token punctuation">;</span>\nunknownStr <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>\n<span class="token comment">// s = unknownStr // error unknown类型的变量不能直接赋值给其它类型变量</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-void" tabindex="-1"><a class="header-anchor" href="#_9-void"><span>9. void</span></a></h2><p>表示没有返回值;以函数为例，如果没有声明函数返回类型时，函数会根据 return 值的数据类型来识别函数返回变量类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// let unusable = undefined;</span>\n<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-null-和-undefined" tabindex="-1"><a class="header-anchor" href="#_10-null-和-undefined"><span>10. null 和 undefined</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// let num:number;</span>\n<span class="token comment">// console.log(num); // 报错</span>\n\n<span class="token comment">// 一个元素可能有多个数据类型</span>\n<span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-never" tabindex="-1"><a class="header-anchor" href="#_11-never"><span>11. never</span></a></h2><p>表示的是那些永不存在的值的类型，例如代码运行报错，或者死循环。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// （1）总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</span>\n<span class="token comment">// （2）变量也可能是Never类型，当它们被永不为真的类型保护所约束时。Never类型是任何类型的子类型，可以赋值给任何类型；没有类型是Never的子类型或可以赋值给Never类型（除了Never本身）。 即使 Any类型也不可以赋值给Never类型。</span>\n<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-object" tabindex="-1"><a class="header-anchor" href="#_12-object"><span>12. Object</span></a></h2><ul><li>表示一个 js 对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>也可以像类型别名一样声明变量类型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// {} 用来指定对象中可以包含哪些属性</span>\n<span class="token comment">// 语法:{属性名:属性值,属性名:属性值},在属性后面加?,表示属性是可选的</span>\n<span class="token keyword">let</span> <span class="token literal-property property">obj1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;monkey&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 当不能确定对象属性个数时，以上的方式就不能满足实现</span>\n<span class="token keyword">let</span> <span class="token literal-property property">obj2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>propName<span class="token operator">:</span> number<span class="token punctuation">]</span><span class="token operator">:</span> any <span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Baboon&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// [propName: string]: any 表示任意类型的属性</span>\n<span class="token comment">// propName 名字可以随便定义，: string表示指定属性名的数据类型,: any 表示指定值的数据类型是any</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>限制函数结构(有几个参数，返回值是什么类型)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">obj3</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">n</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span>\n<span class="token function-variable function">obj3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">num2</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量"><span>字面量</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 限制变量的值就是该字面量的值,一般用于指定变量值的范围</span>\n<span class="token keyword">let</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&quot;cat&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;fish&quot;</span><span class="token punctuation">;</span>\nb <span class="token operator">=</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nb <span class="token operator">=</span> <span class="token string">&quot;fish&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token comment">// b = &#39;12&#39; // error</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名"><span>类型别名</span></a></h2><p>可以给一个类型定义一个名字</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type People <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">,</span> sex<span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token literal-property property">peopleArr</span><span class="token operator">:</span> People<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;men&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用来告诉编译器变量的实际类型</span>\n<span class="token comment">// 防止在不确定传参类型的时候，就访问其中一个类型特有的属性或方法</span>\n\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n<span class="token comment">// 如果 val 的数据类型是数字，是不包含 length 属性的</span>\n<span class="token comment">// if (val.length) {</span>\n<span class="token comment">// return val.length</span>\n<span class="token comment">// } else {</span>\n<span class="token comment">// return val.toString().length</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 两种使用方式</span>\n<span class="token comment">// 1. 使用变量 as 类型（推荐）</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n<span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n<span class="token punctuation">}</span>\n<span class="token comment">// 2. 使用&lt;类型&gt;值</span>\n<span class="token comment">// if ((&lt;string&gt;val).length) {</span>\n<span class="token comment">// return (&lt;string&gt;val).length</span>\n<span class="token comment">// } else {</span>\n<span class="token comment">// return val.toString().length</span>\n<span class="token comment">// }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',43)],p={},o=(0,a(6262).A)(p,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/blogs/note/typescript/3.typescriptshujuleixing.html","title":"3.Typescript中的数据类型","lang":"en-US","frontmatter":{"title":"3.Typescript中的数据类型","date":"2019-11-17T00:00:00.000Z","categories":["note"],"tags":["Typescript"]},"headers":[{"level":2,"title":"1. 布尔类型 (boolean)","slug":"_1-布尔类型-boolean","link":"#_1-布尔类型-boolean","children":[]},{"level":2,"title":"2. 数字类型 (number)","slug":"_2-数字类型-number","link":"#_2-数字类型-number","children":[]},{"level":2,"title":"3. 字符串类型 (string)","slug":"_3-字符串类型-string","link":"#_3-字符串类型-string","children":[]},{"level":2,"title":"4. 数组类型 (array)","slug":"_4-数组类型-array","link":"#_4-数组类型-array","children":[]},{"level":2,"title":"5. 元组类型 (tuple)","slug":"_5-元组类型-tuple","link":"#_5-元组类型-tuple","children":[]},{"level":2,"title":"6. 枚举类型 (enum)","slug":"_6-枚举类型-enum","link":"#_6-枚举类型-enum","children":[]},{"level":2,"title":"7. 任意类型 (any)","slug":"_7-任意类型-any","link":"#_7-任意类型-any","children":[]},{"level":2,"title":"8. unknown","slug":"_8-unknown","link":"#_8-unknown","children":[]},{"level":2,"title":"9. void","slug":"_9-void","link":"#_9-void","children":[]},{"level":2,"title":"10. null 和 undefined","slug":"_10-null-和-undefined","link":"#_10-null-和-undefined","children":[]},{"level":2,"title":"11. never","slug":"_11-never","link":"#_11-never","children":[]},{"level":2,"title":"12. Object","slug":"_12-object","link":"#_12-object","children":[]},{"level":2,"title":"字面量","slug":"字面量","link":"#字面量","children":[]},{"level":2,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[]},{"level":2,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/note/typescript/3.typescript数据类型.md"}')}}]);