"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[7699],{6965:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>o,data:()=>l});var e=a(641);const t=[(0,e.Fv)('<h2 id="一、state" tabindex="-1"><a class="header-anchor" href="#一、state"><span>一、state</span></a></h2><p>可以把 state 当做页面中的一个变量集合，值是对象，通过更新组件的 state 来更新对应的页面显示，跟 vue 和小程序的 data 作用相同</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在constructor中定义</span>\n<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">// react</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在class中定义</span>\n<span class="token keyword">class</span> <span class="token class-name">Side</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\nstate <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>setState</code>来修改数据</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、props-只读" tabindex="-1"><a class="header-anchor" href="#二、props-只读"><span>二、props(只读)</span></a></h2><ul><li>组件之间传值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Head title<span class="token operator">=</span><span class="token string">&quot;头部&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token comment">// 通过this.props接收传参</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">&quot;layout-header&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>title <span class="token operator">||</span> <span class="token string">&#39;头部&#39;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Head\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对 props 进行限制,设置 props 默认值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Head title<span class="token operator">=</span><span class="token string">&quot;头部&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span> <span class="token comment">// https://www.npmjs.com/package/prop-types</span>\n\n<span class="token comment">// propTypes：限制是否必传，数据类型</span>\n<span class="token comment">// defaultProps：设置props默认值</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">//static： 不需要实例化类，即可直接通过该类来调用的属性，即称之为“静态属性”</span>\n  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">title</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span> <span class="token comment">// 只能传字符串类型的数据，必填</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;头部&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">&quot;layout-header&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>title <span class="token operator">||</span> <span class="token string">&#39;头部&#39;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Head\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数式组件使用 props</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span> <span class="token operator">=</span> props\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>姓名：<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>性别：<span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>年龄：<span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nPerson<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span> <span class="token comment">//限制name必传，且为字符串</span>\n  <span class="token literal-property property">sex</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span> <span class="token comment">//限制sex为字符串</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span> <span class="token comment">//限制age为数值</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//指定默认标签属性值</span>\nPerson<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token comment">//sex默认值为男</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment">//age默认值为18</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、refs-与事件处理" tabindex="-1"><a class="header-anchor" href="#三、refs-与事件处理"><span>三、refs 与事件处理</span></a></h2><ul><li>ref 的三种使用方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 字符串(不推荐，尽量避免)</span>\n<span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">&quot;node&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token comment">// 声明</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>node<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token comment">// 调用</span>\n\n<span class="token comment">// 2. 回调(页面数据更新时会调用两次)</span>\n<span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token comment">// 声明</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>node<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 调用</span>\n\n<span class="token comment">// 3. createRef(最新版本推出)</span>\nmyRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 声明</span>\n<span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current <span class="token comment">// 调用</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、扩展" tabindex="-1"><a class="header-anchor" href="#四、扩展"><span>四、扩展</span></a></h2><h3 id="_4-1-受控及非受控组件" tabindex="-1"><a class="header-anchor" href="#_4-1-受控及非受控组件"><span>4.1.受控及非受控组件</span></a></h3><ul><li>受控组件</li></ul><p>受控组件是必须要有 value 的，value 用来传入一个参数，结合 onchang 来控制这个参数输出。每当 value 变化的时候，都会调用 onchange 的方法，事件处理器拿到新的值之后就会重新渲染视图，更新表单。</p><ul><li>非受控组件</li></ul><p>非受控组件即不受状态的控制，获取数据就是相当于操作 DOM。一般没有 value，我们就可以认为这个组件是非受控组件，但是我们可以通过 defaultValue 来给初始值。onBlur 是失去焦点，一旦输入框失去焦点就会触发响应的方法。</p>',23)],p={},o=(0,a(6262).A)(p,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/blogs/note/react/4.reactzujiandesandahexinshuxing.html","title":"4.组件的三大核心属性","lang":"en-US","frontmatter":{"title":"4.组件的三大核心属性","date":"2019-04-18T00:00:00.000Z","categories":["note"],"tags":["React"]},"headers":[{"level":2,"title":"一、state","slug":"一、state","link":"#一、state","children":[]},{"level":2,"title":"二、props(只读)","slug":"二、props-只读","link":"#二、props-只读","children":[]},{"level":2,"title":"三、refs 与事件处理","slug":"三、refs-与事件处理","link":"#三、refs-与事件处理","children":[]},{"level":2,"title":"四、扩展","slug":"四、扩展","link":"#四、扩展","children":[{"level":3,"title":"4.1.受控及非受控组件","slug":"_4-1-受控及非受控组件","link":"#_4-1-受控及非受控组件","children":[]}]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/note/react/4.react组件的三大核心属性.md"}')}}]);