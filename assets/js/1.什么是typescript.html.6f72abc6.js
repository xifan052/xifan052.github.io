"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[8785],{4215:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>a,data:()=>n});var p=i(641);const r=(0,p.Lk)("h2",{id:"typescript-简介",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#typescript-简介"},[(0,p.Lk)("span",null,"TypeScript 简介")])],-1),l={href:"https://www.tslang.cn",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<h2 id="为什么选择-typescript" tabindex="-1"><a class="header-anchor" href="#为什么选择-typescript"><span>为什么选择 TypeScript</span></a></h2><h3 id="typescript-增加了代码的可读性和可维护性" tabindex="-1"><a class="header-anchor" href="#typescript-增加了代码的可读性和可维护性"><span>TypeScript 增加了代码的可读性和可维护性</span></a></h3><ul><li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li><li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li><li>增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</li></ul><h3 id="typescript-非常包容" tabindex="-1"><a class="header-anchor" href="#typescript-非常包容"><span>TypeScript 非常包容</span></a></h3><ul><li>TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可</li><li>即使不显式的定义类型，也能够自动做出类型推论</li><li>可以定义从简单到复杂的几乎一切类型</li><li>即使 TypeScript 编译报错，也可以生成 JavaScript 文件</li><li>兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 TypeScript 读取</li></ul><h3 id="typescript-拥有活跃的社区" tabindex="-1"><a class="header-anchor" href="#typescript-拥有活跃的社区"><span>TypeScript 拥有活跃的社区</span></a></h3><ul><li>大部分第三方库都有提供给 TypeScript 的类型定义文件</li><li>Google 开发的 Angular2 就是使用 TypeScript 编写的</li><li>TypeScript 拥抱了 ES6 规范，也支持部分 ESNext 草案的规范</li></ul><h3 id="typescript-的缺点" tabindex="-1"><a class="header-anchor" href="#typescript-的缺点"><span>TypeScript 的缺点</span></a></h3><p>任何事物都是有两面性的，我认为 TypeScript 的弊端在于：</p><ul><li>有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的概念</li><li>短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，TypeScript 能够减少其维护成本</li><li>集成到构建流程需要一些工作量</li><li>可能和一些库结合的不是很完美</li></ul>',10),s={},a=(0,i(6262).A)(s,[["render",function(e,t){const i=(0,p.g2)("ExternalLinkIcon");return(0,p.uX)(),(0,p.CE)("div",null,[r,(0,p.Lk)("p",null,[(0,p.Lk)("a",l,[(0,p.eW)("TypeScript"),(0,p.bF)(i)]),(0,p.eW)("是微软开发的一个开源的编程语言，通过在 JavaScript 的基础上添加静态类型定义构建而成。TypeScript 通过 TypeScript 编译器或 Babel 转译为 JavaScript 代码，可运行在任何浏览器，任何操作系统。2012 年 10 月，微软发布了首个公开版本的 TypeScript，2013 年 6 月 19 日，在经历了一个预览版之后微软正式发布了正式版 TypeScript。")]),c])}]]),n=JSON.parse('{"path":"/blogs/note/typescript/1.shimeshitypescript.html","title":"1.什么是Typescript","lang":"en-US","frontmatter":{"title":"1.什么是Typescript","date":"2019-11-05T00:00:00.000Z","categories":["note"],"tags":["Typescript"]},"headers":[{"level":2,"title":"TypeScript 简介","slug":"typescript-简介","link":"#typescript-简介","children":[]},{"level":2,"title":"为什么选择 TypeScript","slug":"为什么选择-typescript","link":"#为什么选择-typescript","children":[{"level":3,"title":"TypeScript 增加了代码的可读性和可维护性","slug":"typescript-增加了代码的可读性和可维护性","link":"#typescript-增加了代码的可读性和可维护性","children":[]},{"level":3,"title":"TypeScript 非常包容","slug":"typescript-非常包容","link":"#typescript-非常包容","children":[]},{"level":3,"title":"TypeScript 拥有活跃的社区","slug":"typescript-拥有活跃的社区","link":"#typescript-拥有活跃的社区","children":[]},{"level":3,"title":"TypeScript 的缺点","slug":"typescript-的缺点","link":"#typescript-的缺点","children":[]}]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/note/typescript/1.什么是typescript.md"}')}}]);