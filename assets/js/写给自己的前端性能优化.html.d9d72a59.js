"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[9173],{1598:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>b});var e=a(641);const t=a.p+"assets/img/c87b2e6e10ed4701b084200007a8fdbf_tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.234f5a96.png",p=(0,e.Fv)('<p>一直想写篇前端性能相关的总结，个人觉得这块的内容会比较分散，面试的时候问起来，也不容易有一个清晰的框架，但是平时的习惯是想起来什么就写什么，所以攒了好久的内容只能躺在一堆笔记草稿里面；</p><p>---🚩🚩正文分割线🚩🚩---</p><p>按页面加载链路分类，从下面几个方面开始</p><ul><li><p>首屏加载</p></li><li><p>代码优化</p></li><li><p>构建工具</p></li></ul><h2 id="首屏加载" tabindex="-1"><a class="header-anchor" href="#首屏加载"><span>首屏加载</span></a></h2><p>这部分其实就是把从获取资源到页面呈现中可以优化的点提取出来</p><h3 id="_1-dns预解析" tabindex="-1"><a class="header-anchor" href="#_1-dns预解析"><span>1. DNS预解析</span></a></h3><p>不需要用户点击链接就在后台解析，在head中添加</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是要注意会增加一定的网络请求和带宽消耗，非必要域名谨慎使用</p><h3 id="_2-开启http2" tabindex="-1"><a class="header-anchor" href="#_2-开启http2"><span>2. 开启HTTP2</span></a></h3><p>首先说下相对于<code>HTTP1</code>的优势</p><ul><li><strong>多路复用</strong>，能够在单个<code>TCP</code>连接上同时传输多个请求和响应；<code>HTTP1.1</code>有一个可选的<code>Pipelining</code>技术，但它是按照顺序处理响应的，后发的请求可能被先发的请求阻塞，所以很多浏览器默认不开启。</li><li><strong>首部压缩</strong>，使用HPACK算法对请求和响应头部进行压缩，减少了首部大小，节省了带宽。而在<code>HTTP/1.x</code>中，每次请求都需要发送完整的头部信息，很容易造成不必要的带宽浪费。</li><li><strong>服务器推送</strong>，服务端可以在发送页面<code>HTML</code>，也就是客户端请求对应<code>HTML</code>页面时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。</li><li><strong>二进制分帧</strong>，使用二进制协议对数据进行分帧传输。二进制协议更高效，减少了解析数据的开销，并提高了传输速度。</li></ul>',13),l={href:"https://mp.weixin.qq.com/s/OCC0NWYwM5w1MkZ1sPXGqg",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Fv)('<p>在nginx中开启HTTP2</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改nginx.conf中的配置</span>\nserver <span class="token punctuation">{</span>\n    listen <span class="token number">443</span> ssl http2<span class="token punctuation">;</span>\n    server_name example.com<span class="token punctuation">;</span>\n\n    <span class="token comment"># SSL证书和密钥路径</span>\n    ssl_certificate /path/to/ssl/cert<span class="token punctuation">;</span>\n    ssl_certificate_key /path/to/ssl/key<span class="token punctuation">;</span>\n\n    <span class="token comment"># 其他配置项</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-资源的预加载" tabindex="-1"><a class="header-anchor" href="#_3-资源的预加载"><span>3. 资源的预加载</span></a></h3>',3),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Fv)('<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styles.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-动态创建加载脚本" tabindex="-1"><a class="header-anchor" href="#_4-动态创建加载脚本"><span>4. 动态创建加载脚本</span></a></h3><p>不管是<code>js</code>还是<code>css</code>，在下载过程中其实都是会阻塞页面的，动态加载会在下载资源的同时，也不影响后续代码的执行</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nscript<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;myscript.js&quot;</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-同构渲染" tabindex="-1"><a class="header-anchor" href="#_5-同构渲染"><span>5. 同构渲染</span></a></h3><p>其实就是服务端渲染（SSR）+ 客户端渲染（CSR），服务端渲染的升级版，像现在的<code>Nuxt.js</code>或者<code>Next.js</code>就可以实现；</p><p>引用《vue.js设计与实现》的对比来更直观的了解同构渲染的特点</p><table><thead><tr><th></th><th>CSR</th><th>SSR</th><th>同构</th></tr></thead><tbody><tr><td>SEO</td><td>不友好</td><td>友好</td><td>友好</td></tr><tr><td>白屏问题</td><td>有</td><td>无</td><td>无</td></tr><tr><td>占用服务器资源</td><td>少</td><td>多</td><td>中</td></tr><tr><td>用户体验</td><td>好</td><td>差</td><td>好</td></tr></tbody></table><h3 id="_6-可见性优化" tabindex="-1"><a class="header-anchor" href="#_6-可见性优化"><span>6. 可见性优化</span></a></h3><p>这部分主要是针对非可视区域进行延迟加载来减少首屏执行的逻辑</p><h4 id="非可视区域" tabindex="-1"><a class="header-anchor" href="#非可视区域"><span>非可视区域</span></a></h4><ul><li><strong>延迟接口请求</strong>，使用<code>setTimeout</code>或者<code>then</code>函数来置后加载时机；</li><li><strong>图片懒加载</strong>，使用<code>IntersectionObserver</code>实现可视区域判断；</li></ul><h4 id="虚拟滚动" tabindex="-1"><a class="header-anchor" href="#虚拟滚动"><span>虚拟滚动</span></a></h4><p>只加载上下及当前页的数据；可以通过滚动时分页或者<code>vue-virtual-scroll-list</code>及<code>react-virtualized</code>一类的插件实现；</p><h3 id="_7-针对白屏-抖动" tabindex="-1"><a class="header-anchor" href="#_7-针对白屏-抖动"><span>7. 针对白屏/抖动</span></a></h3><p>加载过程中无法避免的会有短暂白屏，</p><ul><li><strong>骨架屏</strong>，可以选择固定灰色块，或者计算页面元素宽高生成灰色快；</li><li><strong>loading</strong>，加入比较有意思的<code>loading</code>动画；</li><li><strong>定义宽高</strong>，图片或者接口数据在渲染到页面之后，会撑开所在的元素，就造成页面抖动，设置好盒子或者图片的宽高或者设置个占位；</li><li><strong>字体闪烁</strong>，加载字体且生效之前的闪烁，通过压缩字体减小资源体积，设置<code>font-display:block</code>来解决加载过程中的字体样式异常；</li></ul><h3 id="_8-静态资源" tabindex="-1"><a class="header-anchor" href="#_8-静态资源"><span>8. 静态资源</span></a></h3><ul><li>合理使用协商缓存和强缓存及本地存储</li><li>使用字体图标代替图片图标</li><li>使用webp</li><li>图片压缩</li><li>使用cdn</li></ul><h2 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化"><span>代码优化</span></a></h2><p>这部分只是列出来可优化点，感兴趣可以去搜索相关实现，建议只有出现明确的性能问题存在时，才进行优化</p><h3 id="_1-js" tabindex="-1"><a class="header-anchor" href="#_1-js"><span>1. JS</span></a></h3><ul><li>使用<code>script</code>的<code>async</code>和<code>defer</code>属性避免阻塞；</li><li>service worker，拦截网络请求，灵活的判断是否需要缓存资源；</li><li>Web Worker，创建一个新的线程，在一个独立的js环境中执行逻辑，不会阻塞后续逻辑的执行，针对耗时的计算任务或者执行时间比较久的逻辑处理；</li><li>批量请求及事件任务切片；</li><li>节流和防抖；</li><li>事件委托；</li><li>及时销毁闭包及定时器；</li><li>缓存变量及dom属性；</li><li>变量作用域的合理声明；</li></ul><h3 id="_2-css" tabindex="-1"><a class="header-anchor" href="#_2-css"><span>2. CSS</span></a></h3>',24),r=(0,e.Fv)("<li>回流属性放在一块集中修改；</li><li>避免选择器嵌套过深；</li><li>用<code>CSS</code>动画代替<code>JS</code>动画；</li><li>使用伪元素简化<code>html</code>结构，如<code>:before代替div</code>；</li>",4),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Fv)("<li>减少<code>CSS</code>类名查找范围，浏览器解析<code>CSS</code>遵循的是从右到左的查找规范，先找<code>.b</code>再找<code>.a</code>，将<code>.wrap .a .b</code>改为<code>wrap .b</code>；</li>",1),k=(0,e.Fv)('<h3 id="_3-vue" tabindex="-1"><a class="header-anchor" href="#_3-vue"><span>3. Vue</span></a></h3><ul><li><code>v-show</code>和<code>v-if</code>的合理使用，频繁更新显示状态使用<code>v-show</code>；</li><li>使用<code>keep-alive</code>和<code>v-once</code>减少多余的更新渲染；</li><li>通过<code>Object.freeze</code>移除双向绑定，减少不必要的数据监听；</li><li>避免<code>template</code>中使用复杂的表达式；</li></ul><h3 id="_4-react" tabindex="-1"><a class="header-anchor" href="#_4-react"><span>4. React</span></a></h3><ul><li><strong>memo</strong>，减少子组件的重复渲染，简单组件不会有太大的效果，并且会加大内存消耗；</li><li><strong>useMemo</strong>，相当于Vue中的computed函数，所设置的依赖没有变化时，就会返回上一次的计算结果；</li><li><strong>useCallback</strong>，避免重复创建函数；</li><li><strong>组件卸载清理</strong>，Class组件：<code>componentWillUnmount</code>，Function 组件：<code>useEffect return</code></li><li><strong>使用React Fragment</strong>，减少额外节点的渲染；</li></ul><h2 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具"><span>构建工具</span></a></h2><p>目前基本上使用<code>vite</code>，这里主要针对<code>vite</code>优化，<code>webpack</code>就简单带过</p><h3 id="_1-webpack" tabindex="-1"><a class="header-anchor" href="#_1-webpack"><span>1. webpack</span></a></h3><ul><li>指定模块解析范围，设置解析文件类型范围</li><li>webpack打包/构建缓存<code>hard-source-webpack-plugin</code>；</li><li>资源的压缩，拆分、第三方包的提取合并（<code>config</code>配置<code>optimization.splitChunks</code>）；</li></ul><h3 id="_2-摇树优化" tabindex="-1"><a class="header-anchor" href="#_2-摇树优化"><span>2. 摇树优化</span></a></h3><p>就是在保证代码运行结果不变的前提下，去除无用的代码；其实<code>Rollup</code>会默认开启摇树优化，但需要是<code>ES6 module</code>模块，第三方包尽管可能使用esm版本，本身体积会更小，而且能有更好的压缩效果</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>\n<span class="token comment">// 改为</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 如果这行被注释，vite就不会再引入lodash包</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除线上的<code>console</code>和<code>debugger</code>，这个根据项目需求决定是否需要配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>\n    <span class="token literal-property property">esbuild</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">drop</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;debugger&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-gzip压缩" tabindex="-1"><a class="header-anchor" href="#_3-gzip压缩"><span>3. gzip压缩</span></a></h3><p>这个就是在客户端进行文件压缩，服务端直接调用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> viteCompression <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-compression&#39;</span><span class="token punctuation">;</span>\n\n<span class="token function">viteCompression</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">disable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不禁⽤压缩</span>\n    <span class="token literal-property property">deleteOriginFile</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 压缩后是否删除原⽂件</span>\n    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">// 压缩前最⼩⽂件⼤⼩</span>\n    <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">&#39;gzip&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 压缩算法</span>\n    <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&#39;.gz&#39;</span><span class="token punctuation">,</span> <span class="token comment">// ⽂件类型</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx配置静态gzip压缩，会直接读取文件夹中.gz文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改nginx.conf中的配置</span>\nhttp <span class="token punctuation">{</span>\n gzip_static on<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Content-Encoding</code>为<code>gzip</code>就表示设置成功了</p><img src="'+t+'" height="300"><h3 id="_4-图片压缩" tabindex="-1"><a class="header-anchor" href="#_4-图片压缩"><span>4. 图片压缩</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> viteImagemin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-imagemin&#39;</span>\n\n<span class="token function">viteImagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">gifsicle</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// gif图片压缩</span>\n      <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 选择1到3之间的优化级别</span>\n      <span class="token literal-property property">interlaced</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 隔行扫描gif进行渐进式渲染</span>\n      <span class="token comment">// colors: 2 // 将每个输出GIF中不同颜色的数量减少到num或更少。数字必须介于2和256之间。</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">optipng</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// png</span>\n      <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">// 选择0到7之间的优化级别</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">mozjpeg</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// jpeg</span>\n      <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 压缩质量，范围从0(最差)到100(最佳)。</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">pngquant</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// png</span>\n      <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Min和max是介于0(最差)到1(最佳)之间的数字，类似于JPEG。达到或超过最高质量所需的最少量的颜色。如果转换导致质量低于最低质量，图像将不会被保存。</span>\n      <span class="token literal-property property">speed</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 压缩速度，1(强力)到11(最快)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">svgo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// svg压缩</span>\n      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;removeViewBox&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;removeEmptyAttrs&#39;</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-依赖分析" tabindex="-1"><a class="header-anchor" href="#_5-依赖分析"><span>5. 依赖分析</span></a></h3><p>基本上都是用这种方式来查找不必要的依赖引用来减小包体积</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> visualizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-visualizer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> command <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_lifecycle_event\n\n <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    command <span class="token operator">===</span> <span class="token string">&#39;report&#39;</span> <span class="token operator">?</span> \n    <span class="token function">visualizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">brotliSize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;report.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>从整体架构方面还可以做下面几件事；</p><ul><li><p><strong>组件增加权重</strong>，针对单个组件，给组件添加权重值，针对权重大的组件优先展示；</p></li><li><p><strong>按机型加载资源</strong>，根据当前系统版本、机型配置做不同的资源加载，动画交互降级；</p></li><li><p><strong>微前端</strong> 拆分应用，剥离业务，减少业务之间的关联影响，使用<code>micro-app</code>或者<code>qiankun</code>；</p></li></ul><p>最后优化是有成本的，也需要根据场景决定是否进行优化</p><h2 id="传送门" tabindex="-1"><a class="header-anchor" href="#传送门"><span>传送门</span></a></h2>',30),v={href:"https://mp.weixin.qq.com/s/ntIIWA9n1lnqth86cHfIkg",target:"_blank",rel:"noopener noreferrer"},m={},h=(0,a(6262).A)(m,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[p,(0,e.Lk)("p",null,[(0,e.Lk)("a",l,[(0,e.eW)("使用HTTP流式传输提升性能"),(0,e.bF)(a)])]),o,(0,e.Lk)("p",null,[(0,e.eW)("这个其实是安排资源以更高的优先级进行下载和缓存，更详细的可以看看"),(0,e.Lk)("a",i,[(0,e.eW)("MDN文档"),(0,e.bF)(a)])]),c,(0,e.Lk)("ul",null,[r,(0,e.Lk)("li",null,[(0,e.eW)("开启"),(0,e.Lk)("a",d,[(0,e.eW)("GPU加速"),(0,e.bF)(a)]),(0,e.eW)("，这个非必要不推荐开启；")]),u]),k,(0,e.Lk)("p",null,[(0,e.Lk)("a",v,[(0,e.eW)("万字长文：分享前端性能优化知识体系"),(0,e.bF)(a)])])])}]]),b=JSON.parse('{"path":"/blogs/article/8.xiegeizijideqianduanxingnenyouhua/xiegeizijideqianduanxingnenyouhua.html","title":"写给自己的前端性能优化","lang":"en-US","frontmatter":{"title":"写给自己的前端性能优化","categories":["article"],"tags":["性能优化"],"date":"2023-11-07T00:00:00.000Z"},"headers":[{"level":2,"title":"首屏加载","slug":"首屏加载","link":"#首屏加载","children":[{"level":3,"title":"1. DNS预解析","slug":"_1-dns预解析","link":"#_1-dns预解析","children":[]},{"level":3,"title":"2. 开启HTTP2","slug":"_2-开启http2","link":"#_2-开启http2","children":[]},{"level":3,"title":"3. 资源的预加载","slug":"_3-资源的预加载","link":"#_3-资源的预加载","children":[]},{"level":3,"title":"4. 动态创建加载脚本","slug":"_4-动态创建加载脚本","link":"#_4-动态创建加载脚本","children":[]},{"level":3,"title":"5. 同构渲染","slug":"_5-同构渲染","link":"#_5-同构渲染","children":[]},{"level":3,"title":"6. 可见性优化","slug":"_6-可见性优化","link":"#_6-可见性优化","children":[]},{"level":3,"title":"7. 针对白屏/抖动","slug":"_7-针对白屏-抖动","link":"#_7-针对白屏-抖动","children":[]},{"level":3,"title":"8. 静态资源","slug":"_8-静态资源","link":"#_8-静态资源","children":[]}]},{"level":2,"title":"代码优化","slug":"代码优化","link":"#代码优化","children":[{"level":3,"title":"1. JS","slug":"_1-js","link":"#_1-js","children":[]},{"level":3,"title":"2. CSS","slug":"_2-css","link":"#_2-css","children":[]},{"level":3,"title":"3. Vue","slug":"_3-vue","link":"#_3-vue","children":[]},{"level":3,"title":"4. React","slug":"_4-react","link":"#_4-react","children":[]}]},{"level":2,"title":"构建工具","slug":"构建工具","link":"#构建工具","children":[{"level":3,"title":"1. webpack","slug":"_1-webpack","link":"#_1-webpack","children":[]},{"level":3,"title":"2. 摇树优化","slug":"_2-摇树优化","link":"#_2-摇树优化","children":[]},{"level":3,"title":"3. gzip压缩","slug":"_3-gzip压缩","link":"#_3-gzip压缩","children":[]},{"level":3,"title":"4. 图片压缩","slug":"_4-图片压缩","link":"#_4-图片压缩","children":[]},{"level":3,"title":"5. 依赖分析","slug":"_5-依赖分析","link":"#_5-依赖分析","children":[]}]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"传送门","slug":"传送门","link":"#传送门","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/article/8.写给自己的前端性能优化/写给自己的前端性能优化.md"}')}}]);