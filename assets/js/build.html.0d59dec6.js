"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[9486],{8960:(e,a,p)=>{p.r(a),p.d(a,{comp:()=>r,data:()=>h});var n=p(641);const i=(0,n.Fv)('<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h2 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具"><span>构建工具</span></a></h2><h3 id="vite和webpack的区别" tabindex="-1"><a class="header-anchor" href="#vite和webpack的区别"><span>vite和webpack的区别</span></a></h3><p>vite基于<code>ES module</code></p>',4),c={href:"https://juejin.cn/post/7129041114174062628?searchId=202310191145583B42E5B78470DD3D1D51",target:"_blank",rel:"noopener noreferrer"},l=(0,n.Fv)('<h3 id="webpack-打包构建原理" tabindex="-1"><a class="header-anchor" href="#webpack-打包构建原理"><span>webpack 打包构建原理</span></a></h3><p>入口点：Webpack 根据配置文件中指定的入口点（entry point）开始处理。入口点可以是一个或多个文件。Webpack 会从入口点开始建立依赖图，并通过递归解析依赖关系来确定需要打包的模块。</p><p>模块解析：Webpack 使用模块解析器来解析每个模块之间的依赖关系。它支持处理不同类型的模块（如 JavaScript、CSS 等），并提供了一些预定义的解析规则，例如对于 JavaScript 文件，可以使用内置的解析规则根据文件扩展名解析模块路径，并且支持通过配置文件进行自定义解析规则。</p><p>加载器：在模块解析过程中，Webpack 可以使用加载器来对模块进行转换处理。加载器是一些函数，用于将源文件转换为 JavaScript 可以处理的模块。当解析到需要使用加载器进行处理的模块时，Webpack 会根据配置文件中的规则，从右到左链式调用加载器进行转换处理。加载器可以在转换过程中对模块的内容进行操作、转译、转换、优化等，常见的加载器有 Babel Loader、CSS Loader、File Loader 等。</p><p>插件：Webpack 还支持使用插件来扩展其功能。插件是一个具有特定功能的 JavaScript 对象，它可以在打包的各个阶段执行自定义操作。在打包过程中，Webpack 会触发插件的特定钩子函数，插件可以通过这些钩子函数在合适的时机执行自定义的处理逻辑。插件可以用于代码优化、资源压缩、文件输出、环境变量注入等。</p><p>Chunk 和 Bundle：在构建过程中，Webpack 根据入口点和依赖图生成一系列 Chunk。Chunk 是指包含模块的集合，它是构建过程中的中间产物。每个 Chunk 由一个或多个模块组成。然后，Webpack 会对这些 Chunk 进行合并和优化，最终生成一个或多个 Bundle。Bundle 是指将多个 Chunk 合并为一个或多个最终输出文件的过程，它可以是 JavaScript 文件、CSS 文件等。</p><p>输出：在打包过程完成后，Webpack 将生成的 Bundle 输出到指定的目标文件或目录。配置文件中的 output 属性可以配置输出的文件名、路径以及其他选项。输出的文件可以是 JavaScript 文件、CSS 文件、图片文件等，Webpack 可以通过配置文件中的不同选项进行相应的处理和优化。</p><p>持久缓存：Webpack 在构建过程中会生成一些中间产物和编译结果，为了提高打包速度并节省资源，Webpack 提供了持久缓存的功能。每次构建时，Webpack 会根据模块内容生成唯一的标识符（hash）并与缓存相关的文件进行比对，只有发生变化的模块才会重新构建。继承有哪些，区别是什么浏览器渲染过程 promise.all 做了什么</p><h3 id="plugin-的生命周期" tabindex="-1"><a class="header-anchor" href="#plugin-的生命周期"><span>plugin 的生命周期</span></a></h3><h3 id="webpack5的模块联邦" tabindex="-1"><a class="header-anchor" href="#webpack5的模块联邦"><span>webpack5的模块联邦</span></a></h3>',10),t={},r=(0,p(6262).A)(t,[["render",function(e,a){const p=(0,n.g2)("ExternalLinkIcon");return(0,n.uX)(),(0,n.CE)("div",null,[i,(0,n.Lk)("p",null,[(0,n.Lk)("a",c,[(0,n.eW)("https://juejin.cn/post/7129041114174062628?searchId=202310191145583B42E5B78470DD3D1D51"),(0,n.bF)(p)])]),l])}]]),h=JSON.parse('{"path":"/blogs/interview/build.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"构建工具","slug":"构建工具","link":"#构建工具","children":[{"level":3,"title":"vite和webpack的区别","slug":"vite和webpack的区别","link":"#vite和webpack的区别","children":[]},{"level":3,"title":"webpack 打包构建原理","slug":"webpack-打包构建原理","link":"#webpack-打包构建原理","children":[]},{"level":3,"title":"plugin 的生命周期","slug":"plugin-的生命周期","link":"#plugin-的生命周期","children":[]},{"level":3,"title":"webpack5的模块联邦","slug":"webpack5的模块联邦","link":"#webpack5的模块联邦","children":[]}]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/interview/build.md"}')}}]);