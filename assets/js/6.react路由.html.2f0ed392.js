"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[2381],{3626:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>p,data:()=>l});var e=n(641);const t={href:"https://react-router.docschina.org/web/guides/philosophy",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Fv)('<h2 id="一、router-组件" tabindex="-1"><a class="header-anchor" href="#一、router-组件"><span>一、router 组件</span></a></h2><h3 id="_1-1-link" tabindex="-1"><a class="header-anchor" href="#_1-1-link"><span>1.1 Link</span></a></h3><p>实现路由跳转，切换组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link toto<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-navlink" tabindex="-1"><a class="header-anchor" href="#_1-2-navlink"><span>1.2 NavLink</span></a></h3><p>增强版的 Link 组件，当它与当前 URL 匹配时，增加了<code>activeClassName</code>和<code>activeStyle</code>属性，为其渲染元素添加样式属性，封装组件时可以通过<code>this.props.children</code>来获取标签体内容。</p><h3 id="_1-3-browserrouter" tabindex="-1"><a class="header-anchor" href="#_1-3-browserrouter"><span>1.3 BrowserRouter</span></a></h3><p>使用自定义的路径来当路由,同 vue-router 的 history 模式</p><h3 id="_1-4-hashrouter" tabindex="-1"><a class="header-anchor" href="#_1-4-hashrouter"><span>1.4 HashRouter</span></a></h3><p>使用 URL hash 值来作路由,#号后面的内容不会发给服务器,同 vue-router 的 hash 模式</p><h3 id="_1-5-route" tabindex="-1"><a class="header-anchor" href="#_1-5-route"><span>1.5 Route</span></a></h3><p>注册组件，展示组件内容</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// exact：true表示路径精准匹配，false表示模糊匹配(默认)</span>\n<span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/todo&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Todo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-switch" tabindex="-1"><a class="header-anchor" href="#_1-6-switch"><span>1.6 Switch</span></a></h3><p>渲染与该地址匹配的第一个子节点 <code>&lt;Route&gt;</code> 或者<code>&lt;Redirect&gt;</code>，匹配成功之后将不再进行后面节点匹配</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Head<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-redirect" tabindex="-1"><a class="header-anchor" href="#_1-7-redirect"><span>1.7 Redirect</span></a></h3><p>设置默认跳转的页面</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/demo&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Redirect<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>Redirect\n  to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&quot;?utm=your+face&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">referrer</span><span class="token operator">:</span> currentLocation <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-withrouter" tabindex="-1"><a class="header-anchor" href="#_1-8-withrouter"><span>1.8 withRouter</span></a></h3><p>可以让一般组件具备路由组件所特有的 API</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">WithDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>withRouter Demo<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>WithDemo<span class="token punctuation">)</span>\n<span class="token comment">// withRouter的返回值是一个新组件</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、向路由组件传递参数" tabindex="-1"><a class="header-anchor" href="#二、向路由组件传递参数"><span>二、向路由组件传递参数</span></a></h2><h3 id="_3-1-params-参数" tabindex="-1"><a class="header-anchor" href="#_3-1-params-参数"><span>3.1 params 参数</span></a></h3><p><strong>路由链接(携带参数)：</strong><code>&lt;NavLink to=&quot;/routes/params-route/params/1&quot; activeClassName=&quot;current-route&quot;&gt;params参数&lt;/NavLink&gt;</code><strong>注册路由(声明接收)：</strong><code>&lt;Route path=&quot;/routes/params-route/:type/:id&quot; component={ParamsRoute} /&gt;</code><strong>接收参数：</strong><code>this.props.match.params</code></p><h3 id="_3-2-search-参数" tabindex="-1"><a class="header-anchor" href="#_3-2-search-参数"><span>3.2 search 参数</span></a></h3><p><strong>路由链接(携带参数)：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>NavLink\n  to<span class="token operator">=</span><span class="token string">&quot;/routes/search-route?type=search&amp;id=2&quot;</span>\n  activeClassName<span class="token operator">=</span><span class="token string">&quot;current-route&quot;</span>\n<span class="token operator">&gt;</span>\n  search参数\n<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注册路由(无需声明，正常注册即可)：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/routes/search-route&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>SearchRoute<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>接收参数：</strong><code>this.props.location.search</code><strong>备注：</strong> 获取到的<code>search</code>是<code>urlencoded</code>编码字符传，需要借助<code>querystring</code>解析</p><h3 id="_3-3-state-参数" tabindex="-1"><a class="header-anchor" href="#_3-3-state-参数"><span>3.3 state 参数</span></a></h3><p><strong>路由链接(携带参数)：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>NavLink\n  to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/routes/state-route&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  activeClassName<span class="token operator">=</span><span class="token string">&quot;current-route&quot;</span>\n<span class="token operator">&gt;</span>\n  state参数\n<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注册路由(无需声明，正常注册即可)：</strong><code>&lt;Route path=&quot;/routes/state-route&quot; component={StateRoute} /&gt;</code><strong>接收参数：</strong><code>this.props.location.state</code><strong>备注：</strong> 刷新也可以保留住参数</p><h2 id="三、路由组件和一般组件" tabindex="-1"><a class="header-anchor" href="#三、路由组件和一般组件"><span>三、路由组件和一般组件</span></a></h2><ul><li><strong>1.写法不同：</strong> 一般组件（使用自定义组件标签展示）：<code>&lt;Demo/&gt;</code> 路由组件（使用 Route 组件展示）：<code>&lt;Route path=&quot;/demo&quot; component={Demo} /&gt;</code></li><li><strong>2.存放位置不同：</strong> 一般组件：components 路由组件：pages</li><li><strong>3.接收到的 props 不同：</strong> 一般组件：写组件标签时传递了什么，就能收到什么 路由组件：接收到路由的三个固定属性</li></ul><h2 id="四、browserrouter-和-hashrouter-的区别" tabindex="-1"><a class="header-anchor" href="#四、browserrouter-和-hashrouter-的区别"><span>四、BrowserRouter 和 HashRouter 的区别</span></a></h2><ul><li><strong>1.底层原理不同：</strong><code>BrowserRouter</code> 使用的是 H5 的 history API，不兼容 IE9 及以下版本 <code>HashRouter</code>使用的是 URL 的哈希值</li><li><strong>2.path 表现形式不一样：</strong><code>BrowserRouter</code> 的路径没有#，例如<code>http://localhost:3000/home</code><code>HashRouter</code>的路径包含#，例如<code>http://localhost:3000/#/home</code></li><li><strong>3.刷新后对路由 state 参数的影响：</strong><code>BrowserRouter</code> 没有任何影响，因为 state 保存在 history 对象中 <code>HashRouter</code>刷新会导致路由 state 参数的丢失</li><li><code>HashRouter</code>可以用于解决一些路径错误相关的问题，如使用二级路由引入项目内资源文件时，不能加载问题</li></ul>',40),r={},p=(0,n(6262).A)(r,[["render",function(s,a){const n=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("p",null,[(0,e.Lk)("a",t,[(0,e.eW)("react-router-dom"),(0,e.bF)(n)])]),o])}]]),l=JSON.parse('{"path":"/blogs/note/react/6.reactluyou.html","title":"6.react路由","lang":"en-US","frontmatter":{"title":"6.react路由","date":"2019-04-28T00:00:00.000Z","categories":["note"],"tags":["React"]},"headers":[{"level":2,"title":"一、router 组件","slug":"一、router-组件","link":"#一、router-组件","children":[{"level":3,"title":"1.1 Link","slug":"_1-1-link","link":"#_1-1-link","children":[]},{"level":3,"title":"1.2 NavLink","slug":"_1-2-navlink","link":"#_1-2-navlink","children":[]},{"level":3,"title":"1.3 BrowserRouter","slug":"_1-3-browserrouter","link":"#_1-3-browserrouter","children":[]},{"level":3,"title":"1.4 HashRouter","slug":"_1-4-hashrouter","link":"#_1-4-hashrouter","children":[]},{"level":3,"title":"1.5 Route","slug":"_1-5-route","link":"#_1-5-route","children":[]},{"level":3,"title":"1.6 Switch","slug":"_1-6-switch","link":"#_1-6-switch","children":[]},{"level":3,"title":"1.7 Redirect","slug":"_1-7-redirect","link":"#_1-7-redirect","children":[]},{"level":3,"title":"1.8 withRouter","slug":"_1-8-withrouter","link":"#_1-8-withrouter","children":[]}]},{"level":2,"title":"二、向路由组件传递参数","slug":"二、向路由组件传递参数","link":"#二、向路由组件传递参数","children":[{"level":3,"title":"3.1 params 参数","slug":"_3-1-params-参数","link":"#_3-1-params-参数","children":[]},{"level":3,"title":"3.2 search 参数","slug":"_3-2-search-参数","link":"#_3-2-search-参数","children":[]},{"level":3,"title":"3.3 state 参数","slug":"_3-3-state-参数","link":"#_3-3-state-参数","children":[]}]},{"level":2,"title":"三、路由组件和一般组件","slug":"三、路由组件和一般组件","link":"#三、路由组件和一般组件","children":[]},{"level":2,"title":"四、BrowserRouter 和 HashRouter 的区别","slug":"四、browserrouter-和-hashrouter-的区别","link":"#四、browserrouter-和-hashrouter-的区别","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/note/react/6.react路由.md"}')}}]);