"use strict";(self.webpackChunkxifan_blog=self.webpackChunkxifan_blog||[]).push([[4936],{6634:(e,n,a)=>{a.r(n),a.d(n,{comp:()=>s,data:()=>l});var t=a(641);const r=[(0,t.Fv)('<h1 id="question-ranking" tabindex="-1"><a class="header-anchor" href="#question-ranking"><span>Question Ranking</span></a></h1><h2 id="js的事件循环-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#js的事件循环-⭐⭐⭐⭐⭐"><span>js的事件循环 ⭐⭐⭐⭐⭐</span></a></h2><pre><code>微任务\n宏任务\n这两种任务之外的划分，\n点击事件属于哪种，\nrequestAnimationFrame属于哪种\n</code></pre><h2 id="性能优化-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#性能优化-⭐⭐⭐⭐⭐"><span>性能优化 ⭐⭐⭐⭐⭐</span></a></h2><pre><code>具体思路\n...\n\n性能指标\n    首次内容绘制（First Contentful Paint, FCP）\n    最大内容绘制（Largest Contentful Paint, LCP）\n    ```js\n    // 浏览器\n    \n    // 获取 FCP\n    new PerformanceObserver((list) =&gt; {\n        const entry = list.getEntriesByType[&#39;paint&#39;](0);\n        if (entry.name === &#39;first-contentful-paint&#39;) {\n            console.log(&#39;FCP:&#39;, entry.startTime);\n        }\n        }).observe({ type: &#39;paint&#39;, buffered: true });\n\n        // 获取 LCP\n        new PerformanceObserver((list) =&gt; {\n        const entry = list.getEntriesByType[&#39;largest-contentful-paint&#39;](0);\n        console.log(&#39;LCP:&#39;, entry.startTime);\n    }).observe({ type: &#39;largest-contentful-paint&#39;, buffered: true });\n\n    \n    // 小程序\n    Page({\n        onLoad() {\n            this.startTime = performance.now();  // 页面加载开始时间\n        },\n        onReady() {\n            const loadTime = performance.now() - this.startTime;  // 页面渲染完成的时间\n            console.log(&#39;Page Load Time:&#39;, loadTime);\n        }\n    });\n    ```\n</code></pre><h2 id="url到页面渲染-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#url到页面渲染-⭐⭐⭐⭐⭐"><span>url到页面渲染 ⭐⭐⭐⭐⭐</span></a></h2><h2 id="vue的数据劫持-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#vue的数据劫持-⭐⭐⭐⭐⭐"><span>Vue的数据劫持 ⭐⭐⭐⭐⭐</span></a></h2><h2 id="原型和原型链-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#原型和原型链-⭐⭐⭐⭐⭐"><span>原型和原型链 ⭐⭐⭐⭐⭐</span></a></h2><h2 id="interface和type区别-⭐⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#interface和type区别-⭐⭐⭐⭐⭐"><span>interface和type区别 ⭐⭐⭐⭐⭐</span></a></h2>',9)],i={},s=(0,a(6262).A)(i,[["render",function(e,n){return(0,t.uX)(),(0,t.CE)("div",null,r)}]]),l=JSON.parse('{"path":"/blogs/interview/ranking.html","title":"Question Ranking","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"js的事件循环 ⭐⭐⭐⭐⭐","slug":"js的事件循环-⭐⭐⭐⭐⭐","link":"#js的事件循环-⭐⭐⭐⭐⭐","children":[]},{"level":2,"title":"性能优化 ⭐⭐⭐⭐⭐","slug":"性能优化-⭐⭐⭐⭐⭐","link":"#性能优化-⭐⭐⭐⭐⭐","children":[]},{"level":2,"title":"url到页面渲染 ⭐⭐⭐⭐⭐","slug":"url到页面渲染-⭐⭐⭐⭐⭐","link":"#url到页面渲染-⭐⭐⭐⭐⭐","children":[]},{"level":2,"title":"Vue的数据劫持 ⭐⭐⭐⭐⭐","slug":"vue的数据劫持-⭐⭐⭐⭐⭐","link":"#vue的数据劫持-⭐⭐⭐⭐⭐","children":[]},{"level":2,"title":"原型和原型链 ⭐⭐⭐⭐⭐","slug":"原型和原型链-⭐⭐⭐⭐⭐","link":"#原型和原型链-⭐⭐⭐⭐⭐","children":[]},{"level":2,"title":"interface和type区别 ⭐⭐⭐⭐⭐","slug":"interface和type区别-⭐⭐⭐⭐⭐","link":"#interface和type区别-⭐⭐⭐⭐⭐","children":[]}],"git":{"createdTime":1737108179000,"updatedTime":1737108179000,"contributors":[{"name":"稀饭","email":"lixifan@ane56.com","commits":1}]},"filePathRelative":"blogs/interview/ranking.md"}')}}]);